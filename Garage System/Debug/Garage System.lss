
Garage System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  000007fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001506  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad1  00000000  00000000  0000282f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ebd  00000000  00000000  00003bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_1>
   8:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_2>
   c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  54:	c1 00       	.word	0x00c1	; ????
  56:	da 00       	.word	0x00da	; ????
  58:	f3 00       	.word	0x00f3	; ????
  5a:	0c 01       	movw	r0, r24
  5c:	24 01       	movw	r4, r8
  5e:	24 01       	movw	r4, r8
  60:	24 01       	movw	r4, r8
  62:	24 01       	movw	r4, r8
  64:	24 01       	movw	r4, r8
  66:	24 01       	movw	r4, r8
  68:	24 01       	movw	r4, r8
  6a:	24 01       	movw	r4, r8
  6c:	24 01       	movw	r4, r8
  6e:	24 01       	movw	r4, r8
  70:	24 01       	movw	r4, r8
  72:	24 01       	movw	r4, r8
  74:	24 01       	movw	r4, r8
  76:	24 01       	movw	r4, r8
  78:	24 01       	movw	r4, r8
  7a:	24 01       	movw	r4, r8
  7c:	24 01       	movw	r4, r8
  7e:	24 01       	movw	r4, r8
  80:	24 01       	movw	r4, r8
  82:	24 01       	movw	r4, r8
  84:	24 01       	movw	r4, r8
  86:	24 01       	movw	r4, r8
  88:	24 01       	movw	r4, r8
  8a:	24 01       	movw	r4, r8
  8c:	24 01       	movw	r4, r8
  8e:	24 01       	movw	r4, r8
  90:	24 01       	movw	r4, r8
  92:	24 01       	movw	r4, r8
  94:	c1 00       	.word	0x00c1	; ????
  96:	da 00       	.word	0x00da	; ????
  98:	f3 00       	.word	0x00f3	; ????
  9a:	0c 01       	movw	r0, r24
  9c:	31 01       	movw	r6, r2
  9e:	4a 01       	movw	r8, r20
  a0:	63 01       	movw	r12, r6
  a2:	7c 01       	movw	r14, r24
  a4:	94 01       	movw	r18, r8
  a6:	94 01       	movw	r18, r8
  a8:	94 01       	movw	r18, r8
  aa:	94 01       	movw	r18, r8
  ac:	94 01       	movw	r18, r8
  ae:	94 01       	movw	r18, r8
  b0:	94 01       	movw	r18, r8
  b2:	94 01       	movw	r18, r8
  b4:	94 01       	movw	r18, r8
  b6:	94 01       	movw	r18, r8
  b8:	94 01       	movw	r18, r8
  ba:	94 01       	movw	r18, r8
  bc:	94 01       	movw	r18, r8
  be:	94 01       	movw	r18, r8
  c0:	94 01       	movw	r18, r8
  c2:	94 01       	movw	r18, r8
  c4:	94 01       	movw	r18, r8
  c6:	94 01       	movw	r18, r8
  c8:	94 01       	movw	r18, r8
  ca:	94 01       	movw	r18, r8
  cc:	94 01       	movw	r18, r8
  ce:	94 01       	movw	r18, r8
  d0:	94 01       	movw	r18, r8
  d2:	94 01       	movw	r18, r8
  d4:	94 01       	movw	r18, r8
  d6:	94 01       	movw	r18, r8
  d8:	94 01       	movw	r18, r8
  da:	94 01       	movw	r18, r8
  dc:	31 01       	movw	r6, r2
  de:	4a 01       	movw	r8, r20
  e0:	63 01       	movw	r12, r6
  e2:	7c 01       	movw	r14, r24
  e4:	a0 01       	movw	r20, r0
  e6:	a6 01       	movw	r20, r12
  e8:	ac 01       	movw	r20, r24
  ea:	b2 01       	movw	r22, r4
  ec:	b7 01       	movw	r22, r14
  ee:	b7 01       	movw	r22, r14
  f0:	b7 01       	movw	r22, r14
  f2:	b7 01       	movw	r22, r14
  f4:	b7 01       	movw	r22, r14
  f6:	b7 01       	movw	r22, r14
  f8:	b7 01       	movw	r22, r14
  fa:	b7 01       	movw	r22, r14
  fc:	b7 01       	movw	r22, r14
  fe:	b7 01       	movw	r22, r14
 100:	b7 01       	movw	r22, r14
 102:	b7 01       	movw	r22, r14
 104:	b7 01       	movw	r22, r14
 106:	b7 01       	movw	r22, r14
 108:	b7 01       	movw	r22, r14
 10a:	b7 01       	movw	r22, r14
 10c:	b7 01       	movw	r22, r14
 10e:	b7 01       	movw	r22, r14
 110:	b7 01       	movw	r22, r14
 112:	b7 01       	movw	r22, r14
 114:	b7 01       	movw	r22, r14
 116:	b7 01       	movw	r22, r14
 118:	b7 01       	movw	r22, r14
 11a:	b7 01       	movw	r22, r14
 11c:	b7 01       	movw	r22, r14
 11e:	b7 01       	movw	r22, r14
 120:	b7 01       	movw	r22, r14
 122:	b7 01       	movw	r22, r14
 124:	a0 01       	movw	r20, r0
 126:	a6 01       	movw	r20, r12
 128:	ac 01       	movw	r20, r24
 12a:	b2 01       	movw	r22, r4

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	a0 e6       	ldi	r26, 0x60	; 96
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e0 e5       	ldi	r30, 0x50	; 80
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	a8 37       	cpi	r26, 0x78	; 120
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	a8 e7       	ldi	r26, 0x78	; 120
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
 156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
 158:	ab 37       	cpi	r26, 0x7B	; 123
 15a:	b2 07       	cpc	r27, r18
 15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
 15e:	0e 94 8b 02 	call	0x516	; 0x516 <main>
 162:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

00000166 <__bad_interrupt>:
 166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <Dio_WritePinDir>:
			PORT_C = data;
		break;

		case 'D':
		case 'd':
			PORT_D = data;
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	e1 54       	subi	r30, 0x41	; 65
 170:	f1 09       	sbc	r31, r1
 172:	e4 32       	cpi	r30, 0x24	; 36
 174:	f1 05       	cpc	r31, r1
 176:	08 f0       	brcs	.+2      	; 0x17a <Dio_WritePinDir+0x10>
 178:	67 c0       	rjmp	.+206    	; 0x248 <Dio_WritePinDir+0xde>
 17a:	e6 5d       	subi	r30, 0xD6	; 214
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__tablejump2__>
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	59 f4       	brne	.+22     	; 0x19c <Dio_WritePinDir+0x32>
 186:	2a b3       	in	r18, 0x1a	; 26
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <Dio_WritePinDir+0x28>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <Dio_WritePinDir+0x24>
 196:	82 2b       	or	r24, r18
 198:	8a bb       	out	0x1a, r24	; 26
 19a:	08 95       	ret
 19c:	2a b3       	in	r18, 0x1a	; 26
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Dio_WritePinDir+0x3e>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Dio_WritePinDir+0x3a>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	08 95       	ret
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	59 f4       	brne	.+22     	; 0x1ce <Dio_WritePinDir+0x64>
 1b8:	27 b3       	in	r18, 0x17	; 23
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Dio_WritePinDir+0x5a>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Dio_WritePinDir+0x56>
 1c8:	82 2b       	or	r24, r18
 1ca:	87 bb       	out	0x17, r24	; 23
 1cc:	08 95       	ret
 1ce:	27 b3       	in	r18, 0x17	; 23
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <Dio_WritePinDir+0x70>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <Dio_WritePinDir+0x6c>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	87 bb       	out	0x17, r24	; 23
 1e4:	08 95       	ret
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <Dio_WritePinDir+0x96>
 1ea:	24 b3       	in	r18, 0x14	; 20
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <Dio_WritePinDir+0x8c>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <Dio_WritePinDir+0x88>
 1fa:	82 2b       	or	r24, r18
 1fc:	84 bb       	out	0x14, r24	; 20
 1fe:	08 95       	ret
 200:	24 b3       	in	r18, 0x14	; 20
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <Dio_WritePinDir+0xa2>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <Dio_WritePinDir+0x9e>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	84 bb       	out	0x14, r24	; 20
 216:	08 95       	ret
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <Dio_WritePinDir+0xc8>
 21c:	21 b3       	in	r18, 0x11	; 17
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <Dio_WritePinDir+0xbe>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <Dio_WritePinDir+0xba>
 22c:	82 2b       	or	r24, r18
 22e:	81 bb       	out	0x11, r24	; 17
 230:	08 95       	ret
 232:	21 b3       	in	r18, 0x11	; 17
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <Dio_WritePinDir+0xd4>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <Dio_WritePinDir+0xd0>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	81 bb       	out	0x11, r24	; 17
 248:	08 95       	ret

0000024a <Dio_WritePin>:
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	e1 54       	subi	r30, 0x41	; 65
 250:	f1 09       	sbc	r31, r1
 252:	e4 32       	cpi	r30, 0x24	; 36
 254:	f1 05       	cpc	r31, r1
 256:	08 f0       	brcs	.+2      	; 0x25a <Dio_WritePin+0x10>
 258:	67 c0       	rjmp	.+206    	; 0x328 <Dio_WritePin+0xde>
 25a:	e2 5b       	subi	r30, 0xB2	; 178
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__tablejump2__>
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	59 f4       	brne	.+22     	; 0x27c <Dio_WritePin+0x32>
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <Dio_WritePin+0x28>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <Dio_WritePin+0x24>
 276:	82 2b       	or	r24, r18
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	08 95       	ret
 27c:	2b b3       	in	r18, 0x1b	; 27
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <Dio_WritePin+0x3e>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <Dio_WritePin+0x3a>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	8b bb       	out	0x1b, r24	; 27
 292:	08 95       	ret
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	59 f4       	brne	.+22     	; 0x2ae <Dio_WritePin+0x64>
 298:	28 b3       	in	r18, 0x18	; 24
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <Dio_WritePin+0x5a>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <Dio_WritePin+0x56>
 2a8:	82 2b       	or	r24, r18
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	08 95       	ret
 2ae:	28 b3       	in	r18, 0x18	; 24
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <Dio_WritePin+0x70>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <Dio_WritePin+0x6c>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	88 bb       	out	0x18, r24	; 24
 2c4:	08 95       	ret
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	59 f4       	brne	.+22     	; 0x2e0 <Dio_WritePin+0x96>
 2ca:	25 b3       	in	r18, 0x15	; 21
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_WritePin+0x8c>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_WritePin+0x88>
 2da:	82 2b       	or	r24, r18
 2dc:	85 bb       	out	0x15, r24	; 21
 2de:	08 95       	ret
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <Dio_WritePin+0xa2>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <Dio_WritePin+0x9e>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	08 95       	ret
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	59 f4       	brne	.+22     	; 0x312 <Dio_WritePin+0xc8>
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <Dio_WritePin+0xbe>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <Dio_WritePin+0xba>
 30c:	82 2b       	or	r24, r18
 30e:	82 bb       	out	0x12, r24	; 18
 310:	08 95       	ret
 312:	22 b3       	in	r18, 0x12	; 18
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <Dio_WritePin+0xd4>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <Dio_WritePin+0xd0>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	82 bb       	out	0x12, r24	; 18
 328:	08 95       	ret

0000032a <Dio_WriteHighNibbleVal>:
		}
}

void Dio_WriteHighNibbleVal(uint8 port, uint8 val)
{
	switch(port)
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	e1 54       	subi	r30, 0x41	; 65
 330:	f1 09       	sbc	r31, r1
 332:	e4 32       	cpi	r30, 0x24	; 36
 334:	f1 05       	cpc	r31, r1
 336:	d8 f4       	brcc	.+54     	; 0x36e <Dio_WriteHighNibbleVal+0x44>
 338:	ee 58       	subi	r30, 0x8E	; 142
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__tablejump2__>
	{
	case 'A':
	case 'a':
		PORT_A = (PORT_A & 0x0F)|(val & 0xF0);
 340:	8b b3       	in	r24, 0x1b	; 27
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	60 7f       	andi	r22, 0xF0	; 240
 346:	68 2b       	or	r22, r24
 348:	6b bb       	out	0x1b, r22	; 27
	break;
 34a:	08 95       	ret

	case 'B':
	case 'b':
		PORT_B = (PORT_B & 0x0F)|(val & 0xF0);
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	60 7f       	andi	r22, 0xF0	; 240
 352:	68 2b       	or	r22, r24
 354:	68 bb       	out	0x18, r22	; 24
	break;
 356:	08 95       	ret

	case 'C':
	case 'c':
		PORT_C = (PORT_C & 0x0F)|(val & 0xF0);
 358:	85 b3       	in	r24, 0x15	; 21
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	60 7f       	andi	r22, 0xF0	; 240
 35e:	68 2b       	or	r22, r24
 360:	65 bb       	out	0x15, r22	; 21
	break;
 362:	08 95       	ret

	case 'D':
	case 'd':
		PORT_D = (PORT_D & 0x0F)|(val & 0xF0);
 364:	82 b3       	in	r24, 0x12	; 18
 366:	8f 70       	andi	r24, 0x0F	; 15
 368:	60 7f       	andi	r22, 0xF0	; 240
 36a:	68 2b       	or	r22, r24
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <LCD_kick>:

	sprintf (str ,"%s%d.%03d",sign,int1,int2);			// then add the sing then int1 the . then int2 at 03

	LCD_SendString(str);

}
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	82 e6       	ldi	r24, 0x62	; 98
 376:	0e 94 25 01 	call	0x24a	; 0x24a <Dio_WritePin>
 37a:	89 ef       	ldi	r24, 0xF9	; 249
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_kick+0xe>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_kick+0x14>
 384:	00 00       	nop
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	82 e6       	ldi	r24, 0x62	; 98
 38c:	0e 94 25 01 	call	0x24a	; 0x24a <Dio_WritePin>
 390:	08 95       	ret

00000392 <LCD_SendCommand>:
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	82 e6       	ldi	r24, 0x62	; 98
 39c:	0e 94 25 01 	call	0x24a	; 0x24a <Dio_WritePin>
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	82 e6       	ldi	r24, 0x62	; 98
 3a6:	0e 94 25 01 	call	0x24a	; 0x24a <Dio_WritePin>
 3aa:	6c 2f       	mov	r22, r28
 3ac:	81 e6       	ldi	r24, 0x61	; 97
 3ae:	0e 94 95 01 	call	0x32a	; 0x32a <Dio_WriteHighNibbleVal>
 3b2:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_kick>
 3b6:	6c 2f       	mov	r22, r28
 3b8:	62 95       	swap	r22
 3ba:	60 7f       	andi	r22, 0xF0	; 240
 3bc:	81 e6       	ldi	r24, 0x61	; 97
 3be:	0e 94 95 01 	call	0x32a	; 0x32a <Dio_WriteHighNibbleVal>
 3c2:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_kick>
 3c6:	81 ee       	ldi	r24, 0xE1	; 225
 3c8:	94 e0       	ldi	r25, 0x04	; 4
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_SendCommand+0x38>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_SendCommand+0x3e>
 3d0:	00 00       	nop
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <LCD_init>:
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	81 e6       	ldi	r24, 0x61	; 97
 3dc:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	65 e0       	ldi	r22, 0x05	; 5
 3e4:	81 e6       	ldi	r24, 0x61	; 97
 3e6:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	81 e6       	ldi	r24, 0x61	; 97
 3f0:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	67 e0       	ldi	r22, 0x07	; 7
 3f8:	81 e6       	ldi	r24, 0x61	; 97
 3fa:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	82 e6       	ldi	r24, 0x62	; 98
 404:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	82 e6       	ldi	r24, 0x62	; 98
 40e:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	82 e6       	ldi	r24, 0x62	; 98
 418:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
 41c:	85 ea       	ldi	r24, 0xA5	; 165
 41e:	9e e0       	ldi	r25, 0x0E	; 14
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	83 e3       	ldi	r24, 0x33	; 51
 42a:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 42e:	82 e3       	ldi	r24, 0x32	; 50
 430:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 434:	88 e2       	ldi	r24, 0x28	; 40
 436:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 44c:	08 95       	ret

0000044e <LCD_clearScreen>:
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 454:	08 95       	ret

00000456 <LCD_SendCharacter>:
 456:	cf 93       	push	r28
 458:	c8 2f       	mov	r28, r24
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	82 e6       	ldi	r24, 0x62	; 98
 460:	0e 94 25 01 	call	0x24a	; 0x24a <Dio_WritePin>
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	82 e6       	ldi	r24, 0x62	; 98
 46a:	0e 94 25 01 	call	0x24a	; 0x24a <Dio_WritePin>
 46e:	6c 2f       	mov	r22, r28
 470:	81 e6       	ldi	r24, 0x61	; 97
 472:	0e 94 95 01 	call	0x32a	; 0x32a <Dio_WriteHighNibbleVal>
 476:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_kick>
 47a:	6c 2f       	mov	r22, r28
 47c:	62 95       	swap	r22
 47e:	60 7f       	andi	r22, 0xF0	; 240
 480:	81 e6       	ldi	r24, 0x61	; 97
 482:	0e 94 95 01 	call	0x32a	; 0x32a <Dio_WriteHighNibbleVal>
 486:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_kick>
 48a:	82 e4       	ldi	r24, 0x42	; 66
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_SendCharacter+0x36>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_SendCharacter+0x3c>
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <LCD_SendString>:
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	fc 01       	movw	r30, r24
 49e:	80 81       	ld	r24, Z
 4a0:	88 23       	and	r24, r24
 4a2:	59 f0       	breq	.+22     	; 0x4ba <LCD_SendString+0x24>
 4a4:	8f 01       	movw	r16, r30
 4a6:	c0 e0       	ldi	r28, 0x00	; 0
 4a8:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_SendCharacter>
 4ac:	cf 5f       	subi	r28, 0xFF	; 255
 4ae:	f8 01       	movw	r30, r16
 4b0:	ec 0f       	add	r30, r28
 4b2:	f1 1d       	adc	r31, r1
 4b4:	80 81       	ld	r24, Z
 4b6:	81 11       	cpse	r24, r1
 4b8:	f7 cf       	rjmp	.-18     	; 0x4a8 <LCD_SendString+0x12>
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <LCD_SendNumber>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	60 97       	sbiw	r28, 0x10	; 16
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
 4d6:	4a e0       	ldi	r20, 0x0A	; 10
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	be 01       	movw	r22, r28
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	0e 94 66 03 	call	0x6cc	; 0x6cc <itoa>
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_SendString>
 4ec:	60 96       	adiw	r28, 0x10	; 16
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <LCD_GotoXY>:

void LCD_GotoXY(uint8 x,uint8 y)
{
	if (x==0)
 4fe:	81 11       	cpse	r24, r1
 500:	05 c0       	rjmp	.+10     	; 0x50c <LCD_GotoXY+0xe>
		LCD_SendCommand(LCD_BEGIN_AT_FIRST_RAW+y);
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	86 0f       	add	r24, r22
 506:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 50a:	08 95       	ret
	else
		LCD_SendCommand(LCD_BEGIN_AT_SECOND_RAW+y);
 50c:	80 ec       	ldi	r24, 0xC0	; 192
 50e:	86 0f       	add	r24, r22
 510:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_SendCommand>
 514:	08 95       	ret

00000516 <main>:
uint8 temp=0;

int main(void)
{
	// Initializations //
	LCD_init();
 516:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_init>
	LCD_clearScreen();
 51a:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_clearScreen>
	
	// Interrupt enable //
	sei(); //Enable Global int
 51e:	78 94       	sei
	SET_BIT(GICR,INT0); //Enable External INT0
 520:	8b b7       	in	r24, 0x3b	; 59
 522:	80 64       	ori	r24, 0x40	; 64
 524:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT1); //Enable External INT1
 526:	8b b7       	in	r24, 0x3b	; 59
 528:	80 68       	ori	r24, 0x80	; 128
 52a:	8b bf       	out	0x3b, r24	; 59
	
	// Setting Interrupt moods //
	CLR_BIT(MCUCR, ISC00);	 // Interrupt 0
 52c:	85 b7       	in	r24, 0x35	; 53
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
 532:	85 b7       	in	r24, 0x35	; 53
 534:	82 60       	ori	r24, 0x02	; 2
 536:	85 bf       	out	0x35, r24	; 53
	
	CLR_BIT(MCUCR, ISC10); // Interrupt 1
 538:	85 b7       	in	r24, 0x35	; 53
 53a:	8b 7f       	andi	r24, 0xFB	; 251
 53c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC11);
 53e:	85 b7       	in	r24, 0x35	; 53
 540:	88 60       	ori	r24, 0x08	; 8
 542:	85 bf       	out	0x35, r24	; 53
	
	// O/P Pins //
	Dio_WritePinDir('C',3,OUT); //Red LED output pin.
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	83 e4       	ldi	r24, 0x43	; 67
 54a:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
	CLR_BIT(PORTC,3); // Clearing the bit
 54e:	ab 98       	cbi	0x15, 3	; 21
	Dio_WritePinDir('C',4,OUT); //Green LED output pin.
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	83 e4       	ldi	r24, 0x43	; 67
 556:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
	CLR_BIT(PORTC,4); // Clearing the bit
 55a:	ac 98       	cbi	0x15, 4	; 21
	
	// I/P Pins //
	Dio_WritePinDir('D',2,IN);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	62 e0       	ldi	r22, 0x02	; 2
 560:	84 e4       	ldi	r24, 0x44	; 68
 562:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
	Dio_WritePinDir('D',3,IN);
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	84 e4       	ldi	r24, 0x44	; 68
 56c:	0e 94 b5 00 	call	0x16a	; 0x16a <Dio_WritePinDir>
	
	
	
	 LCD_clearScreen();
 570:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_clearScreen>
	

   
    while (1) 
    {
		LCD_GotoXY(0,0);
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_GotoXY>
		LCD_SendString(" Garage System");
 57c:	81 e6       	ldi	r24, 0x61	; 97
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_SendString>
		LCD_GotoXY(1,0);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_GotoXY>
		LCD_SendString("Space: ");
 58c:	80 e7       	ldi	r24, 0x70	; 112
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_SendString>
		temp = max_car_num-car_num;
 594:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 598:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <car_num>
 59c:	89 1b       	sub	r24, r25
 59e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
		LCD_SendNumber(temp);
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_SendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	83 ec       	ldi	r24, 0xC3	; 195
 5ac:	99 e0       	ldi	r25, 0x09	; 9
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x98>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0xa2>
 5b8:	00 00       	nop
 5ba:	dc cf       	rjmp	.-72     	; 0x574 <main+0x5e>

000005bc <Green_LED>:
    }
}

void Green_LED (boolean status)  // Indicates availability for parking.
{
	if (status == ENABLE)
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	11 f4       	brne	.+4      	; 0x5c4 <Green_LED+0x8>
	{
		SET_BIT(PORTC,4);
 5c0:	ac 9a       	sbi	0x15, 4	; 21
 5c2:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTC,4);
 5c4:	ac 98       	cbi	0x15, 4	; 21
 5c6:	08 95       	ret

000005c8 <RED_LED>:
	}
}
void RED_LED (boolean status) // Garage is full/
{
	if (status == ENABLE)
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <RED_LED+0x8>
	{
		SET_BIT(PORTC,3);
 5cc:	ab 9a       	sbi	0x15, 3	; 21
 5ce:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTC,3);
 5d0:	ab 98       	cbi	0x15, 3	; 21
 5d2:	08 95       	ret

000005d4 <__vector_1>:
	}
}

ISR(INT0_vect)  // Adds car to the garage. 
{
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	2f 93       	push	r18
 5e0:	3f 93       	push	r19
 5e2:	4f 93       	push	r20
 5e4:	5f 93       	push	r21
 5e6:	6f 93       	push	r22
 5e8:	7f 93       	push	r23
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
 5ee:	af 93       	push	r26
 5f0:	bf 93       	push	r27
 5f2:	ef 93       	push	r30
 5f4:	ff 93       	push	r31
	
	car_num++;
 5f6:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <car_num>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	82 0f       	add	r24, r18
 5fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <car_num>
	
		if(car_num == max_car_num)
 602:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 606:	89 13       	cpse	r24, r25
 608:	07 c0       	rjmp	.+14     	; 0x618 <__vector_1+0x44>
		{
			RED_LED(ENABLE);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <RED_LED>
			Green_LED(0);		
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 de 02 	call	0x5bc	; 0x5bc <Green_LED>
 616:	0b c0       	rjmp	.+22     	; 0x62e <__vector_1+0x5a>
		}
		else if (car_num < max_car_num) 
 618:	89 17       	cp	r24, r25
 61a:	38 f4       	brcc	.+14     	; 0x62a <__vector_1+0x56>
		{
			Green_LED(ENABLE);
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 de 02 	call	0x5bc	; 0x5bc <Green_LED>
			RED_LED(0);
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <RED_LED>
 628:	02 c0       	rjmp	.+4      	; 0x62e <__vector_1+0x5a>
		}
		else 
		{
			car_num--;
 62a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <car_num>
		}
	
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_2>:


ISR(INT1_vect) // Removes car from the garage. 
{
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
	
	if (car_num == min_car_num)
 672:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <car_num>
 676:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <min_car_num>
 67a:	89 13       	cpse	r24, r25
 67c:	07 c0       	rjmp	.+14     	; 0x68c <__vector_2+0x3c>
	{
		
		Green_LED(ENABLE);
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 de 02 	call	0x5bc	; 0x5bc <Green_LED>
		RED_LED(0);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <RED_LED>
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__vector_2+0x4e>
	}
	else
	{
		car_num--;
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <car_num>
		Green_LED(ENABLE);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 de 02 	call	0x5bc	; 0x5bc <Green_LED>
		RED_LED(0);
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <RED_LED>
	}
	
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <__tablejump2__>:
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	05 90       	lpm	r0, Z+
 6c6:	f4 91       	lpm	r31, Z
 6c8:	e0 2d       	mov	r30, r0
 6ca:	09 94       	ijmp

000006cc <itoa>:
 6cc:	45 32       	cpi	r20, 0x25	; 37
 6ce:	51 05       	cpc	r21, r1
 6d0:	20 f4       	brcc	.+8      	; 0x6da <itoa+0xe>
 6d2:	42 30       	cpi	r20, 0x02	; 2
 6d4:	10 f0       	brcs	.+4      	; 0x6da <itoa+0xe>
 6d6:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__itoa_ncheck>
 6da:	fb 01       	movw	r30, r22
 6dc:	10 82       	st	Z, r1
 6de:	cb 01       	movw	r24, r22
 6e0:	08 95       	ret

000006e2 <__itoa_ncheck>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	4a 30       	cpi	r20, 0x0A	; 10
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <__itoa_ncheck+0x12>
 6e8:	99 23       	and	r25, r25
 6ea:	22 f4       	brpl	.+8      	; 0x6f4 <__itoa_ncheck+0x12>
 6ec:	bd e2       	ldi	r27, 0x2D	; 45
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__utoa_common>

000006f8 <__utoa_ncheck>:
 6f8:	bb 27       	eor	r27, r27

000006fa <__utoa_common>:
 6fa:	fb 01       	movw	r30, r22
 6fc:	55 27       	eor	r21, r21
 6fe:	aa 27       	eor	r26, r26
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	aa 1f       	adc	r26, r26
 706:	a4 17       	cp	r26, r20
 708:	10 f0       	brcs	.+4      	; 0x70e <__utoa_common+0x14>
 70a:	a4 1b       	sub	r26, r20
 70c:	83 95       	inc	r24
 70e:	50 51       	subi	r21, 0x10	; 16
 710:	b9 f7       	brne	.-18     	; 0x700 <__utoa_common+0x6>
 712:	a0 5d       	subi	r26, 0xD0	; 208
 714:	aa 33       	cpi	r26, 0x3A	; 58
 716:	08 f0       	brcs	.+2      	; 0x71a <__utoa_common+0x20>
 718:	a9 5d       	subi	r26, 0xD9	; 217
 71a:	a1 93       	st	Z+, r26
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	79 f7       	brne	.-34     	; 0x6fe <__utoa_common+0x4>
 720:	b1 11       	cpse	r27, r1
 722:	b1 93       	st	Z+, r27
 724:	11 92       	st	Z+, r1
 726:	cb 01       	movw	r24, r22
 728:	0c 94 96 03 	jmp	0x72c	; 0x72c <strrev>

0000072c <strrev>:
 72c:	dc 01       	movw	r26, r24
 72e:	fc 01       	movw	r30, r24
 730:	67 2f       	mov	r22, r23
 732:	71 91       	ld	r23, Z+
 734:	77 23       	and	r23, r23
 736:	e1 f7       	brne	.-8      	; 0x730 <strrev+0x4>
 738:	32 97       	sbiw	r30, 0x02	; 2
 73a:	04 c0       	rjmp	.+8      	; 0x744 <strrev+0x18>
 73c:	7c 91       	ld	r23, X
 73e:	6d 93       	st	X+, r22
 740:	70 83       	st	Z, r23
 742:	62 91       	ld	r22, -Z
 744:	ae 17       	cp	r26, r30
 746:	bf 07       	cpc	r27, r31
 748:	c8 f3       	brcs	.-14     	; 0x73c <strrev+0x10>
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
